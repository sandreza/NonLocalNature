f_amps = [50, 150, 300, 450, 750, 0.1, 1, 10, 0.01]
ŒΩs = [sqrt(1e-5 / 2), sqrt(1e-5)]
ŒΩ_hs = [sqrt(1e-3), sqrt(1e-4), sqrt(10^(-2.0))]
tic = Base.time()

jj = 1
ii = 1
kk = 3
f_amp = f_amps[ii]
ŒΩ = ŒΩs[jj]
ŒΩ_h = ŒΩ_hs[kk]

filename = "larger_domain_case_filter_" * string(ii) * "_" * string(jj) * "_" * string(kk)
println("---------------------------------")
println("Computing case $filename with f_amp = $f_amp, ŒΩ = $(ŒΩ^2), ŒΩ_h = $(ŒΩ_h^2)")
# Initialize the fields, choose domain size
N = 2^7
N_ens = 2^5 # 2^7
Ns = (N * 4, N, N_ens)

# initialize constants
Œ∫ = 1e-3 # 1e-3
dissipation_power = 2
hypoviscocity_power = 2

@info "initializing fields"
using FourierCore, FourierCore.Grid, FourierCore.Domain
using FFTW, LinearAlgebra, BenchmarkTools, Random, HDF5, ProgressBars, Statistics
using CUDA
arraytype = CuArray

rng = MersenneTwister(12345)
Random.seed!(12)

phase_speed = 1.0

Œ© = S¬π(4 * 4œÄ) √ó S¬π(4œÄ) √ó S¬π(1)
grid = FourierGrid(Ns, Œ©, arraytype=arraytype)
nodes, wavenumbers = grid.nodes, grid.wavenumbers

# build filter 
x = nodes[1]
y = nodes[2]
kÀ£ = wavenumbers[1]
k ∏ = wavenumbers[2]

# construct fields 
œÜ = arraytype(zeros(Ns...))
rand!(rng, œÜ)
œÜ *= 2œÄ

field = arraytype(zeros(N, N))

##
# Fields 
# velocity
œà = arraytype(zeros(ComplexF64, Ns...))
u = similar(œà)
v = similar(œà)
u‚ÇÄ = similar(œà)
v‚ÇÄ = similar(œà)

# prognostic variables
S = arraytype(zeros(ComplexF64, size(œà)..., 2))
SÃá = arraytype(zeros(ComplexF64, size(œà)..., 2))

# auxiliary fields
uŒ∏ = similar(œà)
vŒ∏ = similar(œà)
uŒ∂ = similar(œà)
vŒ∂ = similar(œà)

‚àÇÀ£Œ∏ = similar(œà)
‚àÇ ∏Œ∏ = similar(œà)
‚àÇÀ£Œ∂ = similar(œà)
‚àÇ ∏Œ∂ = similar(œà)

‚àÇÀ£uŒ∏ = similar(œà)
‚àÇ ∏vŒ∏ = similar(œà)
‚àÇÀ£uŒ∂ = similar(œà)
‚àÇ ∏vŒ∂ = similar(œà)

ùíüŒ∏ = similar(œà)
ùíüŒ∂ = similar(œà)
Œ∏Ãá = similar(œà)

k‚ÇÅ = similar(S)
k‚ÇÇ = similar(S)
k‚ÇÉ = similar(S)
k‚ÇÑ = similar(S)
SÃÉ = similar(S)

# source
sŒ∏ = similar(œà)
sŒ∂ = similar(œà)

# phase
œÜÃá = similar(œÜ)

# view into prognostic variables Œ∏ and Œ∂
Œ∏ = view(S, :, :, :, 1)
Œ∂ = view(S, :, :, :, 2)
@. Œ∏ = 0.0 * sin(3 * x) * sin(3 * y) + -0.1 + 0im
@. Œ∂ = sin(3 * x) * sin(3 * y)

auxiliary = (; œà, x, y, œÜ, u, v, uŒ∂, vŒ∂, uŒ∏, vŒ∏, ‚àÇÀ£Œ∂, ‚àÇ ∏Œ∂, ‚àÇÀ£Œ∏, ‚àÇ ∏Œ∏, ‚àÇÀ£uŒ∂, ‚àÇ ∏vŒ∂, ‚àÇÀ£uŒ∏, ‚àÇ ∏vŒ∏, ùíüŒ∏, ùíüŒ∂, sŒ∏, sŒ∂)

function momentum_filter(S)
    Œ∂ = view(S, :, :, :, 2)
    P‚Åª¬π * Œ∂
    tmpfield = abs.(kÀ£) .>= 0.5
    Œ∂ .*= tmpfield
    P * Œ∂
    return nothing
end

function load_psi!(œà; filename="case_1", directory="/storage5/NonlocalPassiveTracers/Current/")
    fid = h5open(directory * filename * ".hdf5", "r")
    œà .= arraytype(read(fid["stream function"]))
    close(fid)
    return nothing
end

@info "done initializing fields"

forcing_amplitude = f_amp
œµ = 0.0
œâs = [0.0]

Œît = 2 / 32 # 8 / N # timestep
scaleit = 2^8 #  2^9
@info "initializing operators"
# operators
‚àÇx = im * kÀ£
‚àÇy = im * k ∏
Œî = @. ‚àÇx^2 + ‚àÇy^2

# plan ffts
P = plan_fft!(œà, (1, 2))
P‚Åª¬π = plan_ifft!(œà, (1, 2))

# Dissipation 
Œî = @. ‚àÇx^2 + ‚àÇy^2
Œî‚Åª¬π = 1 ./ Œî
bools = (!).(isnan.(Œî‚Åª¬π))
Œî‚Åª¬π .*= bools # hack in the fact that false * NaN = 0

ùíüŒΩ = @. -(-ŒΩ_h * Œî‚Åª¬π)^(hypoviscocity_power) - (-ŒΩ * Œî)^(dissipation_power)
ùíüŒ∫ = @. Œ∫ * Œî

# filter for forcing 
# construct waver
kxmax = maximum(kÀ£)
kymax = maximum(k ∏)
kxymax = maximum([kxmax, kymax])
waver = @. (kÀ£)^2 + (k ∏)^2 ‚â§ 0.5 * kxymax^2
waver .*= @. (kÀ£ != 0.0) .* (k ∏ != 0.0)
waver[1, :] .= 1.0
waver[:, 1] .= 1.0
waver[1, 1] = 0.0

# waver[:, floor(Int, N / 2)+1] .= 0.0
# waver[floor(Int, N / 2)+1, :] .= 0.0

operators = (; P, P‚Åª¬π, Œî‚Åª¬π, waver, ùíüŒΩ, ùíüŒ∫, ‚àÇx, ‚àÇy)

##
include("timestepping.jl")
##
@show "initializing ensembles"
sŒ∏ .= 0.0

tstart = 2^5 * scaleit # start time for gathering statistics
tend = 2^6 * scaleit # simulation endtime 2^9 is 512
mod_index = scaleit # save every other mod index
decorrelation_index = 2^8 * scaleit # how many steps till we reinitialize tracer, for lagrangian decorrelation
decorrelation_index2 = 2^10 * scaleit # how many steps till we reinitialize u‚ÇÄ, for eulerian decorrelation

constants = (; forcing_amplitude=forcing_amplitude, œµ=œµ, œâs=œâs)
parameters = (; auxiliary, operators, constants) # auxiliary was defined in initialize_fields.jl

iend = ceil(Int, tend / Œît)
start_index = round(Int, tstart / Œît)
eulerian_list = Float64[]
lagrangian_list = Float64[]
ke_list = Float64[]
tlist = Float64[]
t = [0.0]

t .= 0.0
iter = ProgressBar(1:iend)
for i = iter
    step!(S, SÃÉ, œÜ, œÜÃá, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ, Œît, rng, t, parameters)
    if i == start_index
        Œ∏ .= u
        u‚ÇÄ .= u
    end
    if (i > start_index) && (i % mod_index == 0)
        if i % decorrelation_index == 0
            Œ∏ .= u
        end
        if i % decorrelation_index2 == 0
            u‚ÇÄ .= u
        end
        uu = real(mean(u .* u‚ÇÄ))
        tmpuŒ∏ = real(mean(u .* Œ∏))

        push!(eulerian_list, uu)
        push!(lagrangian_list, tmpuŒ∏)
        push!(ke_list, real(mean(u .* u + v .* v)))
        push!(tlist, t[1])

        Œ∏_min, Œ∏_max = extrema(Array(real.(Œ∏))[:])
        Œ∂_min, Œ∂_max = extrema(Array(real.(Œ∂))[:])
        s1 = "Œ∏_min: $Œ∏_min \nŒ∏_max: $Œ∏_max \nŒ∂_min: $Œ∂_min \nŒ∂_max: $Œ∂_max"
        s2 = "\nuu : $(uu) \nuŒ∏ : $(tmpuŒ∏)"
        set_multiline_postfix(iter, s1 * s2)
    end
end

# lagrangian further ensemble averaging
skipL = round(Int, decorrelation_index / mod_index)
skipL = minimum([skipL, length(lagrangian_list)])
# start_index
# si = Int(maximum([argmax(lagrangian_list) % skipL, skipL]))
si = 1
# end index
ei = floor(Int, (length(lagrangian_list) - si + 1) / skipL)
formatted_lagrangian_list = [lagrangian_list[si+(i-1)*skipL:si+i*skipL-2] for i in 1:ei]

# eulerian further ensemble averaging 
skip = round(Int, decorrelation_index2 / mod_index)
skip = minimum([skip, length(lagrangian_list)])
# start_index
si = Int(maximum([argmax(eulerian_list) % skip, skip]))
si = 1
# end index
ei = floor(Int, (length(eulerian_list) - si + 1) / skip)
formatted_eulerian_list = [eulerian_list[si+(i-1)*skip:si+i*skip-1] for i in 1:ei]

directory = "/storage5/NonlocalPassiveTracers/Current/"
fid = h5open(directory * filename * ".hdf5", "w")
fid["forcing amplitude"] = f_amp
fid["Nx"] = Ns[1]
fid["Ny"] = Ns[2]
fid["Nensemble"] = N_ens
fid["nu"] = ŒΩ^dissipation_power
fid["nu harmonic power"] = dissipation_power
fid["kappa"] = Œ∫
fid["hypoviscocity"] = ŒΩ_h^hypoviscocity_power
fid["hypoviscosity power"] = hypoviscocity_power
fid["vorticity"] = real.(Array(Œ∂))
P‚Åª¬π * œà
fid["stream function"] = real.(Array(œà))
fid["lagrangian decorrelation"] = mean(formatted_lagrangian_list)
fid["lagrangian decorrelation unprocessesed"] = lagrangian_list
fid["eulerian decorrelation unprocessesed"] = eulerian_list
fid["eulerian decorrelation"] = mean(formatted_eulerian_list)
fid["kinetic energy evolution"] = ke_list
fid["times output decorrelation case"] = tlist
fid["domain size x"] = Œ©[1].b - Œ©[1].a
fid["domain size y"] = Œ©[2].b - Œ©[2].a
fid["dt"] = Œît
fid["forcing filter"] = Array(waver)[:, :, 1]
close(fid)

@show "done initializing ensembles"


tstart = 2^5 * scaleit
tend = 2^6 * scaleit
load_psi!(œà; filename=filename) # was defined in the initalize fields file
P * œà;
Œ∂ .= Œî .* œà;
P‚Åª¬π * Œ∂; # initalize stream function and vorticity
if 0.05 < f_amp < 0.2
    Œît = 16 / N # timestep
    tstart = 2^5 * scaleit * 2^2
    tend = 2^6 * scaleit * 2^2
    @info "changing timestep to $Œît"
end
constants = (; forcing_amplitude=forcing_amplitude, œµ=œµ, œâs=œâs)
parameters = (; auxiliary, operators, constants) # auxiliary was defined in initialize_fields.jl
@info "diffusivity kernel"
using FourierCore, FourierCore.Grid, FourierCore.Domain
using FFTW, LinearAlgebra, BenchmarkTools, Random, JLD2
# using GLMakie, HDF5
using ProgressBars
rng = MersenneTwister(1234)
Random.seed!(123456789)

maxind = minimum([40 * 4, floor(Int, Ns[1] / 4)])
index_choices = 2:maxind # 2:maxind

start_index = floor(Int, tstart / Œît)

sŒ∏ .= 0.0
Œ∏ .= 0

for index_choice in ProgressBar(index_choices)
    k·∂† = kÀ£[index_choice]
    @. Œ∏ += cos(k·∂† * x) / (k·∂†)^2 / Œ∫ # scaling so that source is order 1
end

P * Œ∏ # in place fft
@. ùíüŒ∏ = ùíüŒ∫ * Œ∏
P‚Åª¬π * ùíüŒ∏ # in place fft
P‚Åª¬π * Œ∏ # in place fft
sŒ∏ .+= -ùíüŒ∏ # add to source

Œ∏ .= 0.0 # initialize with zero
t = [0.0]
iend = ceil(Int, tend / Œît)

# new realization of flow
rand!(rng, œÜ) # between 0, 1
œÜ .*= 2œÄ # to make it a random phase

Œ∏ÃÑ = arraytype(zeros(ComplexF64, Ns[1], Ns[2], N_ens))

iter = ProgressBar(1:iend)
ke_list = Float64[]
k_list = Vector{Float64}[]
t .= 0.0
for i = iter
    step!(S, SÃÉ, œÜ, œÜÃá, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ, Œît, rng, t, parameters)
    if i % mod_index == 0
        Œ∏_min, Œ∏_max = extrema(real.(Œ∏))
        Œ∂_min, Œ∂_max = extrema(real.(Œ∂))
        set_multiline_postfix(iter, "Œ∏_min: $Œ∏_min \nŒ∏_max: $Œ∏_max \nŒ∂_min: $Œ∂_min \nŒ∂_max: $Œ∂_max")
    end
    if i > start_index
        Œ∏ÃÑ .+= Œît .* Œ∏
    end
    if i % mod_index == 0
        push!(ke_list, real(mean(u .* u + v .* v)))

        tmp = Array(real.(fft(mean(Œ∏ÃÑ, dims=(2, 3))[:]))) ./ (t[1] - tstart) # tmp = real.(fft(Array(mean(Œ∏[:,:,1:10], dims = (2,3)))[:]))
        kxa = Array(kÀ£)[:]
        effective_diffusivities = ((Ns[1] / 2) ./ tmp) ./ (kxa .^ 2) .- Œ∫ # (((Ns[1] / 2) ./ tmp) .- Œª) ./ (kxa .^ 2) .- Œ∫
        effective_diffusivities = effective_diffusivities[index_choices]
        push!(k_list, effective_diffusivities)
    end
end

Œ∏ÃÑ ./= (tend - tstart)
Œ∏ÃÑ_A = Array(real.(Œ∏ÃÑ))


tmp = Array(real.(fft(mean(Œ∏ÃÑ, dims=(2, 3))[:]))) # tmp = real.(fft(Array(mean(Œ∏[:,:,1:10], dims = (2,3)))[:]))
kxa = Array(kÀ£)[:]
effective_diffusivities = ((Ns[1] / 2) ./ tmp) ./ (kxa .^ 2) .- Œ∫
effective_diffusivities = effective_diffusivities[index_choices]

# estimate kernel on grid
kernel = real.(fft([0.0, effective_diffusivities..., zeros(65)..., reverse(effective_diffusivities)...]))
kernel = kernel .- mean(kernel[63:65])
kernel = circshift(kernel, floor(Int, Ns[1] / 2))


# save computation
fid = h5open(directory * filename * ".hdf5", "r+")
fid["diffusivity kernel fourier"] = effective_diffusivities
fid["kernel"] = kernel
fid["ensemble mean in fourier space from diffusivity calculation"] = tmp
close(fid)
##
using GLMakie
scatter(effective_diffusivities)
#=
load_psi!(œà; filename=filename) # was defined in the initalize fields file
P * œà;
Œ∂ .= Œî .* œà;
P‚Åª¬π * Œ∂; # initalize stream function and vorticity
œµ = 1.0    # large scale parameter, 0 means off, 1 means on
œâs = [0.0]    # frequency, 0 means no time dependence

# need to change the parameters and constants every time
constants = (; forcing_amplitude=forcing_amplitude, œµ=œµ, œâs=œâs)
parameters = (; auxiliary, operators, constants) # auxiliary was defined in initialize_fields.jl
@. u = (‚àÇy * œà)
P‚Åª¬π * u
Œ∏ .= u


start_index = floor(Int, tstart / Œît)
sŒ∏ .= 0.0
t = [0.0]
iend = ceil(Int, tend / Œît)
# new realization of flow
rand!(rng, œÜ) # between 0, 1
œÜ .*= 2œÄ # to make it a random phase

# Œ∏ÃÑ = arraytype(zeros(ComplexF64, N, N, N_ens))

iter = ProgressBar(1:iend)
ke_list = Float64[]
uŒ∏_list = Float64[]
tlist = Float64[]

push!(uŒ∏_list, real(mean(Œ∏ .* u)))
push!(ke_list, real(mean(u .* u + v .* v)))
push!(tlist, t[1])
t .= 0.0
for i = iter
    step!(S, SÃÉ, œÜ, œÜÃá, k‚ÇÅ, k‚ÇÇ, k‚ÇÉ, k‚ÇÑ, Œît, rng, t, parameters)
    push!(uŒ∏_list, real(mean(Œ∏ .* u)))
    push!(tlist, t[1])
    if i % mod_index == 0
        Œ∏_min, Œ∏_max = extrema(real.(Œ∏))
        Œ∂_min, Œ∂_max = extrema(real.(Œ∂))
        s1 = "Œ∏_min: $Œ∏_min \nŒ∏_max: $Œ∏_max \nŒ∂_min: $Œ∂_min \nŒ∂_max: $Œ∂_max"
        s2 = "\nuŒ∏   : $(uŒ∏_list[i])"
        set_multiline_postfix(iter, s1 * s2)
    end
    if i > start_index
        # u is already in real space as is Œ∏
        # Œ∏ÃÑ .+= Œît .* Œ∏ .* u
    end
    if i % mod_index == 0
        push!(ke_list, real(mean(u .* u + v .* v)))
    end
end

# Œ∏ÃÑ ./= (tend - tstart)
# Œ∏ÃÑ_A = Array(real.(Œ∏ÃÑ))

@info "done with large scale case"
fid = h5open(directory * filename * ".hdf5", "r+")
fid["large scale effective diffusivity (with time evolution)"] = uŒ∏_list
fid["large scale effective diffusivity times"] = tlist
large_scale = mean(uŒ∏_list[start_index:end])
fid["large scale effective diffusivity"] = large_scale
=#